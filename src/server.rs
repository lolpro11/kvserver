use std::{collections::HashMap, net::{IpAddr, Ipv4Addr, SocketAddr}, sync::{Arc, Mutex}};

use futures::{future, prelude::*};
use kvserver::KV;
use tarpc::{
    context, server::{self, incoming::Incoming, Channel}, tokio_serde::formats::Json
};

#[allow(dead_code)]
#[derive(Clone)]
struct KVServer {
    address: SocketAddr,
    data: Arc<Mutex<HashMap<String, String>>>,
}

async fn spawn(fut: impl Future<Output = ()> + Send + 'static) {
    tokio::spawn(fut);
}

impl KV for KVServer {
    async fn put(self, _: context::Context, key: String, value: String) -> String {
        self.data.lock().unwrap().insert(key, value);
        return "Value Added".to_string();
    }
    async fn append(self, _: context::Context, key: String, value: String) -> String {
        let mut data = self.data.lock().unwrap();
        if data.contains_key(&key) {
            let msg = format!("Appended Key, Old Value: {}", data.get(&key).unwrap());
            data.remove(&key);
            data.insert(key, value);
            return msg;
        }
        return "Error: Key does not exist".to_string();
    }
    async fn get(self, _: context::Context, key: String) -> String {
        let data = self.data.lock().unwrap();
        if data.contains_key(&key) {
            return format!("Value: {}", data.get(&key).unwrap());
        }
        return "Error: Key does not exist".to_string();
    }
}

#[tokio::main]
async fn main() -> anyhow::Result<()> {

    let server_addr = (IpAddr::V4(Ipv4Addr::LOCALHOST), 9010);

    // JSON transport is provided by the json_transport tarpc module. It makes it easy
    // to start up a serde-powered json serialization strategy over TCP.
    let mut listener = tarpc::serde_transport::tcp::listen(&server_addr, Json::default).await?;
    println!("Listening on port {}", listener.local_addr().port());
    listener.config_mut().max_frame_length(usize::MAX);
    listener
        // Ignore accept errors.
        .filter_map(|r| future::ready(r.ok()))
        .map(server::BaseChannel::with_defaults)
        // Limit channels to 1 per IP.
        .max_channels_per_key(1, |t| t.transport().peer_addr().unwrap().ip())
        // serve is generated by the service attribute. It takes as input any type implementing
        // the generated World trait.
        .map(|channel| {
            let server = KVServer { 
                address: channel.transport().peer_addr().unwrap(),
                data: Arc::new(Mutex::new(HashMap::new()))
            };
            channel.execute(server.serve()).for_each(spawn)
        })
        // Max 10 channels.
        .buffer_unordered(10)
        .for_each(|_| async {})
        .await;

    Ok(())
}

